{
  "schemaVersion": "2.2",
  "description": "Runs a Vertica connectivity smoke test via AWS Systems Manager.",
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "VerticaSmokeTest",
      "inputs": {
        "timeoutSeconds": 1800,
        "runCommand": [
          "set -euo pipefail",
          "echo '[info] Vertica smoke test started at '$(date -Iseconds)",
          "echo '[info] Validating amazon-ssm-agent service status'",
          "systemctl is-enabled amazon-ssm-agent",
          "systemctl --no-pager status amazon-ssm-agent || true",
          "if ! systemctl is-active --quiet amazon-ssm-agent; then echo '[error] amazon-ssm-agent is not active'; exit 1; fi",
          "echo '[info] amazon-ssm-agent is active'",
          "echo '[info] Capturing instance metadata for diagnostics'",
          "TOKEN=$(curl -s -X PUT http://169.254.169.254/latest/api/token -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600' || true)",
          "if [ -n \"$TOKEN\" ]; then IMDS_HEADER=(-H 'X-aws-ec2-metadata-token: '$TOKEN); else IMDS_HEADER=(); fi",
          "META=$(curl -s \"${IMDS_HEADER[@]}\" http://169.254.169.254/latest/dynamic/instance-identity/document || true)",
          "echo '[debug] Instance identity document:'",
          "echo \"$META\"",
          "PUBLIC_IP=$(curl -s \"${IMDS_HEADER[@]}\" http://169.254.169.254/latest/meta-data/public-ipv4 || true)",
          "if [ -z \"$PUBLIC_IP\" ]; then echo '[error] Unable to determine public IPv4 address'; exit 1; fi",
          "echo '[info] Public IPv4 detected: '$PUBLIC_IP",
          "echo '[info] Recording Docker and network diagnostics'",
          "docker --version",
          "docker info",
          "docker ps --format 'table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'",
          "docker inspect --format 'Image {{.Config.Image}} exposes {{range $key, $value := .Config.ExposedPorts}}{{$key}} {{end}}and binds {{range $p, $bindings := .NetworkSettings.Ports}}{{$p}} -> {{range $binding := $bindings}}{{$binding.HostIp}}:{{$binding.HostPort}} {{end}}{{end}}' vertica_ce",
          "ss -tulpn | grep ':${vertica_port}' || (echo '[error] Expected port ${vertica_port} not listening'; exit 1)",
          "echo '[info] Verifying Docker image availability for ${vertica_image}'",
          "if ! docker image inspect ${vertica_image} >/dev/null 2>&1; then docker pull ${vertica_image}; fi",
          "echo '[info] Ensuring vertica-python client is installed'",
          "pip3 show vertica-python >/dev/null 2>&1 || pip3 install --quiet vertica-python",
          "echo '[info] Executing Python connectivity validation'",
          "export VERTICA_PORT=${vertica_port}",
          "export VERTICA_DB='${vertica_db_name}'",
          "export BOOTSTRAP_ADMIN_USER='${bootstrap_admin_username}'",
          "export BOOTSTRAP_ADMIN_PASS='${bootstrap_admin_password}'",
          "export ADDITIONAL_ADMIN_USER='${additional_admin_username}'",
          "export ADDITIONAL_ADMIN_PASS='${additional_admin_password}'",
          "export SMOKE_TEST_USER='${smoke_test_username}'",
          "export SMOKE_TEST_PASS='${smoke_test_password}'",
          "export VERTICA_PUBLIC_IP=$PUBLIC_IP",
          "python3 - <<'PY'",
          "import os",
          "import vertica_python",
          "def log(message):",
          "    print(f'[python] {message}', flush=True)",
          "port = int(os.environ['VERTICA_PORT'])",
          "database = os.environ['VERTICA_DB']",
          "public_ip = os.environ['VERTICA_PUBLIC_IP']",
          "bootstrap_user = os.environ['BOOTSTRAP_ADMIN_USER']",
          "bootstrap_pass = os.environ.get('BOOTSTRAP_ADMIN_PASS', '')",
          "additional_user = os.environ['ADDITIONAL_ADMIN_USER']",
          "additional_pass = os.environ['ADDITIONAL_ADMIN_PASS']",
          "smoke_user = os.environ['SMOKE_TEST_USER']",
          "smoke_pass = os.environ['SMOKE_TEST_PASS']",
          "def cfg(host, user, password):",
          "    return {",
          "        'host': host",
          "        'port': port",
          "        'user': user",
          "        'password': password",
          "        'database': database",
          "        'autocommit': True",
          "    }",
          "def ensure_user(cursor, username, password):",
          "    cursor.execute('SELECT 1 FROM users WHERE user_name = %s', [username])",
          "    if cursor.fetchone():",
          "        log(f'User {username!r} already exists; rotating credentials')",
          "        cursor.execute(f'ALTER USER \"{username}\" IDENTIFIED BY %s', [password])",
          "    else:",
          "        log(f'Creating user {username!r}')",
          "        cursor.execute(f'CREATE USER \"{username}\" IDENTIFIED BY %s', [password])",
          "    cursor.execute(f'GRANT CONNECT ON DATABASE \"{database}\" TO \"{username}\"')",
          "    cursor.execute(f'GRANT ALL PRIVILEGES ON DATABASE \"{database}\" TO \"{username}\"')",
          "    cursor.execute('GRANT USAGE ON SCHEMA PUBLIC TO \"' + username + '\"')",
          "    cursor.execute('GRANT ALL PRIVILEGES ON SCHEMA PUBLIC TO \"' + username + '\"')",
          "log('Connecting with bootstrap administrator via localhost')",
          "with vertica_python.connect(**cfg('127.0.0.1', bootstrap_user, bootstrap_pass)) as conn:",
          "    cur = conn.cursor()",
          "    cur.execute('SELECT version()')",
          "    log(f'Vertica version: {cur.fetchone()[0]}')",
          "    ensure_user(cur, smoke_user, smoke_pass)",
          "    ensure_user(cur, additional_user, additional_pass)",
          "log('Testing smoke-test user via localhost')",
          "with vertica_python.connect(**cfg('127.0.0.1', smoke_user, smoke_pass)) as conn:",
          "    cur = conn.cursor()",
          "    cur.execute('SELECT CURRENT_USER')",
          "    log(f'Authenticated as: {cur.fetchone()[0]}')",
          "log('Testing smoke-test user via public IP address')",
          "with vertica_python.connect(**cfg(public_ip, smoke_user, smoke_pass)) as conn:",
          "    cur = conn.cursor()",
          "    cur.execute('SELECT CURRENT_CLIENT_IP()')",
          "    log(f'Client IP reported by Vertica: {cur.fetchone()[0]}')",
          "log('Testing additional admin user via public IP address')",
          "with vertica_python.connect(**cfg(public_ip, additional_user, additional_pass)) as conn:",
          "    cur = conn.cursor()",
          "    cur.execute('SELECT 1')",
          "    assert cur.fetchone()[0] == 1",
          "log('All connectivity checks passed successfully')",
          "PY",
          "echo '[info] Performing TCP reachability checks for localhost and public interfaces'",
          "nc -vz 127.0.0.1 ${vertica_port}",
          "nc -vz $PUBLIC_IP ${vertica_port}",
          "echo '[info] Vertica smoke test completed successfully at '$(date -Iseconds)"
        ]
      }
    }
  ]
}
