name: Destroy Vertica DB

on:
  workflow_dispatch: {}

concurrency:
  group: vertica-db-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preflight:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    steps:
      - name: Check required AWS secrets
        id: check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          missing=()
          for name in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION; do
            if [ -z "${!name:-}" ]; then
              missing+=("$name")
            fi
          done

          if [ ${#missing[@]} -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
            {
              echo "### ✅ Vertica destroy prerequisites"
              echo
              echo "All required AWS secrets are configured."
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "### ⚠️ Vertica destroy prerequisites missing"
              echo
              echo "The destroy job was skipped because these secrets are unset:"
              for name in "${missing[@]}"; do
                echo "- \`$name\`"
              done
              echo
              echo "Set them under **Settings → Secrets and variables → Actions** to enable the teardown workflow."
            } >> "$GITHUB_STEP_SUMMARY"
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

  destroy:
    needs: preflight
    if: ${{ needs.preflight.outputs.ready == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clear stale Terraform lock (idempotent)
        working-directory: infra
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: ./clear-stale-lock.sh

      - name: Backend & init
        working-directory: infra
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          bash backend-bootstrap.sh
          ./clear-stale-lock.sh
          terraform init

      - name: Destroy
        working-directory: infra
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ./clear-stale-lock.sh
          terraform destroy -auto-approve || true
